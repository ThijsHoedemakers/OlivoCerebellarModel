{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1.1) Import packages\n",
    "import numpy as np\n",
    "from importlib import reload\n",
    "from brian2 import*\n",
    "import pickle\n",
    "import NeuroTools as nt\n",
    "from NeuroTools import signals, analysis\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.signal import find_peaks\n",
    "import scipy.io as sio\n",
    "import seaborn as sns\n",
    "import matplotlib.patches as mpatches\n",
    "#import plotpy.express as px\n",
    "%matplotlib notebook\n",
    "\n",
    "# Import and reload my helpers module for iterative development\n",
    "import helpers\n",
    "reload(helpers)\n",
    "from helpers.Function_DataAnalysis import *\n",
    "#from helpers.bin import *\n",
    "\n",
    "# default dict. to assign values\n",
    "from collections import defaultdict\n",
    "\n",
    "# 1.2) Import data of simulations\n",
    "nameInput = '2Sine_50S'\n",
    "#name_simparam = nameInput + '_SimParams.pickle'\n",
    "\n",
    "name_VoltCell_STDP = nameInput + '_VoltageCell_Plasticity.pickle'\n",
    "name_VoltCell_noSTDP = nameInput + '_VoltageCell_NoPlasticity.pickle'\n",
    "\n",
    "name_SpikeT_noSTDP = nameInput + '_SpikeTimes_NoPlasticity.pickle'\n",
    "name_SpikeT_STDP = nameInput + '_SpikeTimes_Plasticity.pickle'\n",
    "\n",
    "#name_PV = nameInput + '_PlasticityVariables.pickle'\n",
    "name_Input_noSTDP = nameInput + 'AfterSim_NoPlasticity.pickle'\n",
    "name_Input_STDP = nameInput + 'AfterSim_Plasticity.pickle'\n",
    "\n",
    "#name_PV = nameInput + '_PlasticityVariables.pickle'\n",
    "#with open(name_PV, 'rb') as par:\n",
    "#    PV = pickle.load(par)\n",
    "with open(name_SpikeT_noSTDP, 'rb') as st:\n",
    "    SpikeTimes_noSTDP = pickle.load(st)\n",
    "with open(name_VoltCell_noSTDP, 'rb') as vc:\n",
    "    VoltCell_noSTDP = pickle.load(vc)\n",
    "with open(name_Input_noSTDP, 'rb') as inp:\n",
    "    Input_noSTDP = pickle.load(inp)\n",
    "\n",
    "with open(name_SpikeT_STDP, 'rb') as stm:\n",
    "    SpikeTimes_STDP = pickle.load(stm)\n",
    "with open(name_VoltCell_STDP, 'rb') as vcm:\n",
    "    VoltCell_STDP = pickle.load(vcm)\n",
    "with open(name_Input_STDP, 'rb') as inpm:\n",
    "    Input_STDP = pickle.load(inpm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2) Split Data - before/after adaptation    \n",
    "\n",
    "# before = start_t:t_beforeAdaptation\n",
    "# after = t_beforeAdaptaion:end\n",
    "# indicated by BA (BeforeAdaptation) and AA (AfterAdaptation) accordingly\n",
    "\n",
    "start = 1000 # remove first second of data due to transient\n",
    "t_beforeAdaptation = int(len(Input_STDP['I'][1])/2)\n",
    "print(len(Input_STDP['I'][1]))\n",
    "print(t_beforeAdaptation)\n",
    "\n",
    "nrInputs=Input_STDP['I'].shape[0] # number of inputs\n",
    "\n",
    "nrPC = VoltCell_noSTDP['PC'].shape[0]\n",
    "nrDCN = VoltCell_noSTDP['DCN'].shape[0]\n",
    "nrIO = VoltCell_noSTDP['IOsoma'].shape[0]\n",
    "nrDummy = nrPC*nrInputs\n",
    "lengthSim =VoltCell_noSTDP['PC'].shape[1]\n",
    "\n",
    "\n",
    "#### NOTE: What to do with 'regular' Input?\n",
    "\n",
    "# Input to the system\n",
    "Input = Slicing(Input_noSTDP, t_start=start)\n",
    "Input_BA = Slicing(Input_noSTDP, t_start=start)\n",
    "Input_AA = Slicing(Input_STDP, t_start=t_beforeAdaptation)\n",
    "\n",
    "# Voltages of Cells\n",
    "VoltCell = Slicing(VoltCell_noSTDP, t_start=start)\n",
    "VoltCell_BA = Slicing(VoltCell_noSTDP, t_start=start)\n",
    "VoltCell_AA = Slicing(VoltCell_STDP, t_start=t_beforeAdaptation)\n",
    "\n",
    "for k in range(0,nrIO):\n",
    "    spikeio_aa, _ = find_peaks(VoltCell_STDP['IOsoma'][k], height=0.0, distance = 10) \n",
    "    spikeio_ba, _ = find_peaks(VoltCell_noSTDP['IOsoma'][k], height=0.0, distance = 10) \n",
    "    spikeio_ba = spikeio_ba/1000\n",
    "    spikeio_aa = spikeio_aa/1000\n",
    "    SpikeTimes_noSTDP['IO'][k]=spikeio_ba\n",
    "    SpikeTimes_STDP['IO'][k]=spikeio_aa\n",
    "    \n",
    "# Slicing spike times\n",
    "SpikeTimes_BA = SlicingSpikes(SpikeTimes_noSTDP, t_start=start/1e3)\n",
    "SpikeTimes_AA = SlicingSpikes(SpikeTimes_STDP, t_start=t_beforeAdaptation/1e3)\n",
    "#SpikeTimes = SlicingSpikes(SpikeTimes_noSTDP, t_start=start/1e3)\n",
    "\n",
    "#print('1-2.5s',SpikeTimes_BA\n",
    "#     ,'2.5-5s',SpikeTimes_AA)\n",
    "print('1-2.5s input', len(Input_BA['I'][1]),\n",
    "     '2.5-5s input', len(Input_AA['I'][1]))\n",
    "print('1-26 s spikes io', SpikeTimes_BA['IO'][1],\n",
    "     '25-50 s spikes io', SpikeTimes_AA['IO'][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2) Split Data - before/after adaptation    \n",
    "\n",
    "# before = start_t:t_beforeAdaptation\n",
    "# after = t_beforeAdaptaion:end\n",
    "# indicated by BA (BeforeAdaptation) and AA (AfterAdaptation) accordingly\n",
    "\n",
    "start = 1000 # remove first second of data due to transient\n",
    "t_beforeAdaptation = int(len(Input_STDP['I'][1])/2)\n",
    "print(len(Input_STDP['I'][1]))\n",
    "print(t_beforeAdaptation)\n",
    "\n",
    "nrInputs=Input_STDP['I'].shape[0] # number of inputs\n",
    "\n",
    "nrPC = VoltCell_noSTDP['PC'].shape[0]\n",
    "nrDCN = VoltCell_noSTDP['DCN'].shape[0]\n",
    "nrIO = VoltCell_noSTDP['IOsoma'].shape[0]\n",
    "nrDummy = nrPC*nrInputs\n",
    "lengthSim =VoltCell_noSTDP['PC'].shape[1]\n",
    "\n",
    "\n",
    "#### NOTE: What to do with 'regular' Input?\n",
    "\n",
    "# Input to the system\n",
    "Input = Slicing(Input_noSTDP, t_start=start)\n",
    "Input_BA = Slicing(Input_noSTDP, t_start=start)\n",
    "Input_AA = Slicing(Input_STDP, t_start=t_beforeAdaptation)\n",
    "\n",
    "# Voltages of Cells\n",
    "VoltCell = Slicing(VoltCell_noSTDP, t_start=start)\n",
    "VoltCell_BA = Slicing(VoltCell_noSTDP, t_start=start)\n",
    "VoltCell_AA = Slicing(VoltCell_STDP, t_start=t_beforeAdaptation)\n",
    "\n",
    "for k in range(0,nrIO):\n",
    "    spikeio_aa, _ = find_peaks(VoltCell_STDP['IOsoma'][k], height=0.0, distance = 10) \n",
    "    spikeio_ba, _ = find_peaks(VoltCell_noSTDP['IOsoma'][k], height=0.0, distance = 10) \n",
    "    spikeio_ba = spikeio_ba/1000\n",
    "    spikeio_aa = spikeio_aa/1000\n",
    "    SpikeTimes_noSTDP['IO'][k]=spikeio_ba\n",
    "    SpikeTimes_STDP['IO'][k]=spikeio_aa\n",
    "    \n",
    "# Slicing spike times\n",
    "SpikeTimes_BA = SlicingSpikes(SpikeTimes_noSTDP, t_start=start/1e3)\n",
    "SpikeTimes_AA = SlicingSpikes(SpikeTimes_STDP, t_start=t_beforeAdaptation/1e3)\n",
    "#SpikeTimes = SlicingSpikes(SpikeTimes_noSTDP, t_start=start/1e3)\n",
    "\n",
    "#print('1-2.5s',SpikeTimes_BA\n",
    "#     ,'2.5-5s',SpikeTimes_AA)\n",
    "print('1-2.5s input', len(Input_BA['I'][1]),\n",
    "     '2.5-5s input', len(Input_AA['I'][1]))\n",
    "print('1-26 s spikes io', SpikeTimes_BA['IO'][1],\n",
    "     '25-50 s spikes io', SpikeTimes_AA['IO'][1])\n",
    "plt.figure()\n",
    "plt.plot(InputCurrentPC_BA['WeightPC0BA'])    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Connection Graphs\n",
    "\n",
    "if nrInputs == 5 :\n",
    "    # Input - Dummy\n",
    "    i_ind = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\n",
    "    j_ind = np.arange(nrDummy)\n",
    "    Connectivity(i_ind,j_ind,'Input','Dummy')\n",
    "\n",
    "    # Dummy-PC\n",
    "    i_dPC = np.arange(nrInputs*nrPC)\n",
    "    j_dPC = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
    "    Connectivity(j_dPC,i_dPC,'PC','Dummy')\n",
    "    # IO - dummy \n",
    "    i_IOd = [9, 10, 18, 17, 0, 6, 5, 12, 16, 11, 9, 10, 18, 17, 0, 6, 5, 12, 16, 11, 9, 10, 18, 17, 0, 6, 5, 12, 16, 11, 9, 10, 18, 17, 0, 6, 5, 12, 16, 11, 9, 10, 18, 17, 0, 6, 5, 12, 16, 11]\n",
    "    j_IOd=np.arange(nrInputs*nrPC)\n",
    "    Connectivity(i_IOd,j_IOd,'IO','Dummy')\n",
    "    # IO - PC\n",
    "    i_IOPC = [9,10, 18, 17, 0, 6, 5, 12, 16, 11]\n",
    "    j_IOPC = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
    "    Connectivity(j_IOPC,i_IOPC,'PC','IO')\n",
    "    # DCN - IO\n",
    "    i_DCNIO = [0, 0 ,0, 0 ,0,0 ,0, 0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9 ,10 ,10 ,10 ,10 ,10 ,10 ,10 ,10 ,10 ,10 ,11 ,11 ,11 ,11 ,11 ,11 ,11 ,11 ,11 ,11 ,12 ,12 ,12 ,12 ,12 ,12 ,12 ,12 ,12 ,12 ,13 ,13 ,13 ,13 ,13 ,13 ,13 ,13 ,13 ,13 ,14 ,14 ,14 ,14,14 ,14 ,14 ,14 ,14 ,14 ,15 ,15 ,15 ,15 ,15 ,15 ,15 ,15 ,15 ,15 ,16 ,16 ,16 ,16 ,16 ,16 ,16 ,16 ,16 ,16 ,17 ,17 ,17 ,17 ,17 ,17 ,17 ,17 ,17 ,17 ,18 ,18 ,18 ,18 ,18 ,18 ,18 ,18 ,18 ,18 ,19 ,19,19 ,19 ,19 ,19 ,19 ,19 ,19 ,19]\n",
    "    j_DCNIO = [5 ,7, 10, 15 ,4 ,6 ,9 ,3 ,1, 11 ,8 ,4 ,11, 17, 14 ,9 ,3 ,2 ,0, 15 ,0 ,3 ,7 ,2 ,9 ,10, 19, 17 ,4 ,14 ,2 ,8, 16 ,3 ,5, 19, 12 ,0, 18, 17, 12 ,9 ,6, 10, 13 ,3 ,4 ,2, 15, 18 ,2, 14, 19, 18, 16, 17 ,5 ,8 ,4 ,9, 14 ,6 ,8, 16, 12, 19 ,4 ,5 ,0 ,3, 16 ,9,13 ,1, 17 ,0 ,8, 14 ,7, 10, 10 ,6, 13 ,1 ,4, 18 ,8, 12, 17 ,0 ,7, 11 ,3 ,1 ,9, 10,6, 17, 13, 18 ,8, 16 ,7 ,1 ,6, 12, 10, 19, 15 ,4, 12 ,2 ,4 ,1, 19, 13, 17, 16 ,8 ,9, 12 ,4 ,3 ,1 ,0 ,8 ,2, 11, 14, 13, 10, 17, 12, 13, 16, 11 ,4 ,2 ,8 ,5, 15, 17, 13, 19, 14 ,1 ,4, 16 ,6 ,3 ,5, 16 ,0, 19 ,2 ,9, 18 ,6 ,4 ,1, 10 ,8, 15 ,3 ,0 ,1 ,4, 13, 19 ,7 ,3 ,9, 14, 18, 16, 17 ,5, 19, 11, 10, 11 ,6, 15, 10 ,5, 12, 17 ,4 ,8, 16, 14 ,8,\n",
    "     10, 15, 4, 11 ,2 ,7 ,5, 18]\n",
    "    Connectivity(i_DCNIO,j_DCNIO,'DCN','IO')\n",
    "\n",
    "    # PC - DCN\n",
    "    i_PCDCN = [0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,2 ,3 ,3 ,3 ,3 ,3 ,3 ,3\n",
    "     ,3 ,3 ,3 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,7 ,7 ,7 ,7\n",
    "     ,7 ,7 ,7 ,7 ,7 ,7 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9]\n",
    "    j_PCDCN = [15, 10, 18 ,3 ,8 ,7 ,1 ,4, 16 ,2 ,4, 14, 12, 10 ,2, 13 ,3 ,0, 15, 16 ,5 ,9 ,0, 13,14, 11, 15, 17, 16, 10, 16 ,1, 13, 17 ,9 ,3 ,5, 10, 12, 18 ,4, 12, 18 ,2 ,5, 13, 15 ,7 ,1 ,6 ,8, 16, 17 ,1, 13, 12, 15 ,7 ,4 ,2, 17 ,0, 14 ,7 ,3, 19 ,4 ,9 ,5 ,2, 18 ,4 ,0, 11, 15 ,3 ,9 ,1 ,8 ,2 ,19 ,1 ,11, 10 ,6 ,0 ,9, 17, 12 ,3 ,7, 11, 17 ,1 ,2, 14,5 ,4, 12 ,0]\n",
    "    Connectivity(i_PCDCN,j_PCDCN,'PC','DCN')\n",
    "elif nrInputs == 2:\n",
    "    # Input-dummy\n",
    "    i_ind = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n",
    "    j_ind = np.arange(nrInputs*nrPC)\n",
    "    Connectivity(i_ind,j_ind,'Input','Dummy')\n",
    "    # dummy-PC\n",
    "    i_dPC = np.arange(nrInputs*nrPC)\n",
    "    j_dPC = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
    "    Connectivity(j_dPC,i_dPC,'PC','Dummy')\n",
    "\n",
    "    # IO - dummy\n",
    "    i_IOd = [9,10, 18, 17, 0, 6, 5, 12, 16, 11, 9,10, 18, 17, 0, 6, 5, 12, 16, 11]\n",
    "    j_IOd=np.arange(nrInputs*nrPC)\n",
    "    Connectivity(i_IOd,j_IOd,'IO','Dummy')\n",
    "\n",
    "    # IO - PC\n",
    "    i_IOPC = [9,10, 18, 17, 0, 6, 5, 12, 16, 11]\n",
    "    j_IOPC = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
    "    Connectivity(j_IOPC,i_IOPC,'PC','IO')\n",
    "\n",
    "    # DCN - IO\n",
    "    i_DCNIO = [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19]\n",
    "\n",
    "    j_DCNIO = [11,4,8,9,14,10,1,7,17,6,9,18,1,0,5,3,6,4,13,2,17,15,4,2,10,16,18,13,19,8,10,4,8,6,3,17,2,19,16,11,19,11,15,2,7,8,4,17,10,1,16,12,15,13,3,0,4,11,1,18,11,8,18,17,12,15,2,5,0,6,15,9,6,8,14,4,18,3,19,12,19,4,14,3,1,11,13,8,15,17,14,16,8,9,11,1,17,2,18,19,12,18,19,10,7,2,13,14,4,5,2,8,5,7,0,13,15,18,6,10,16,3,8,15,1,12,4,7,9,2,10,2,8,5,12,19,16,14,15,4,10,17,13,5,0,18,8,15,4,11,5,12,6,4,2,17,19,14,10,3,17,10,1,15,3,4,7,13,5,16,9,3,15,11,12,0,4,5,7,18,18,2,0,3,9,15,13,1,17,8,14,18,17,3,7,8,9,6,5,13]\n",
    "    Connectivity(i_DCNIO,j_DCNIO,'DCN','IO')\n",
    "\n",
    "    # PC - DCN\n",
    "    i_PCDCN = [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9]\n",
    "    j_PCDCN = [8,17,13,9,11,14,4,16,1,0,17,5,13,2,3,19,4,7,6,8,15,18,2,8,7,11,0,10,16,17,4,16,19,11,18,7,10,8,5,0,0,17,11,13,3,6,1,8,5,10,19,17,12,15,14,4,8,10,18,11,8,6,1,4,16,5,18,3,2,9,3,9,18,11,14,15,4,17,19,10,6,15,10,5,0,11,9,17,12,2,18,0,3,7,2,16,19,10,5,13]\n",
    "    Connectivity(i_PCDCN,j_PCDCN,'PC','DCN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3.1 Input current \n",
    "\n",
    "InputCurrentPC={}\n",
    "InputCurrentPC_BA={}\n",
    "InputCurrentPC_AA={}\n",
    "print(size(Input_AA['nweight'],0))\n",
    "for i in range(0,nrPC):\n",
    "    # Create names for the inputs\n",
    "    name = 'PC'+str(i)\n",
    "    nameBA = 'PC'+str(i) + 'BA'\n",
    "    nameAA = 'PC'+str(i) + 'AA'\n",
    "    \n",
    "    weightBA = 'WeightPC'+str(i)+'BA'\n",
    "    weightAA = 'WeightPC'+str(i)+'AA'\n",
    "\n",
    "    tot = name + 'total'\n",
    "    totBA = nameBA + 'total'\n",
    "    totAA = nameAA + 'total'\n",
    "    # Connectivity between PC-dummy\n",
    "    steps =np.arange(i,nrDummy,nrPC)\n",
    "    #print(steps)\n",
    "    # Multiply the current times the weight\n",
    "    #current = [Input['I'][k]*Input['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    #currentBA = [Input_BA['I'][k]*Input_BA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    weight_BA = [Input_BA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    weight_AA = [Input_AA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    \n",
    "    currentBA = [Input_BA['I'][k]*Input_BA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    currentAA = [Input_AA['I'][k]*Input_AA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    #[Input_s.nweight_BA[steps[k]]*Input_s.I_BA[k] for k in range(0,len(steps))]\n",
    "    #print(steps[1])\n",
    "    #print(size(Input_s.nweight_BA[0]))\n",
    "    #print(size(current))\n",
    "    # Sum over the column to get the total amount of current\n",
    "    #summedcurrent = sum(current,axis=0)\n",
    "    summedcurrentBA = sum(currentBA, axis=0)\n",
    "    summedcurrentAA = sum(currentAA, axis=0)\n",
    "    \n",
    "    #InputCurrentPC[name] = current\n",
    "    InputCurrentPC_BA[nameBA] = currentBA\n",
    "    InputCurrentPC_AA[nameAA] = currentAA\n",
    "    \n",
    "    # weights seperate\n",
    "    InputCurrentPC_BA[weightBA] = weight_BA\n",
    "    InputCurrentPC_AA[weightAA] = weight_AA\n",
    "    \n",
    "    #InputCurrentPC[tot] = summedcurrent\n",
    "    InputCurrentPC_BA[totBA] = summedcurrentBA\n",
    "    InputCurrentPC_AA[totAA] = summedcurrentAA\n",
    "    \n",
    "print(InputCurrentPC_BA['WeightPC0BA'])    \n",
    "#for k in range(0,nrPC):\n",
    "#    figure() \n",
    "#    title('PC'+str(k)+'input current')\n",
    "#    nameBA= 'PC'+str(k)+'BA'\n",
    "#    nameAA= 'PC'+str(k)+'AA'\n",
    "#    for i in range(0,nrInputs):\n",
    "#        subplot(nrInputs,1,i+1)\n",
    "#        plot(InputCurrentPC_BA[nameBA][i])\n",
    "#        plot(InputCurrentPC_AA[nameAA][i])\n",
    "#        #subplot(nrInputs,1,i+1)\n",
    "#    figure()\n",
    "#    for i in range(0,nrInputs):\n",
    "#        subplot(nrInputs,1,i+1)\n",
    "#        plot(Input_BA['nweight'][k+i])\n",
    "#        axvline(SpikeTimes_BA[connectionVector[k]])\n",
    "#        plot(Input_AA['nweight'][k+i])\n",
    "\n",
    "#print(size(InputCurrentPC_BA['PC1BA'],0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3.1 Input current \n",
    "\n",
    "InputCurrentPC={}\n",
    "InputCurrentPC_BA={}\n",
    "InputCurrentPC_AA={}\n",
    "print(size(Input_AA['nweight'],0))\n",
    "for i in range(0,nrPC):\n",
    "    # Create names for the inputs\n",
    "    name = 'PC'+str(i)\n",
    "    nameBA = 'PC'+str(i) + 'BA'\n",
    "    nameAA = 'PC'+str(i) + 'AA'\n",
    "    \n",
    "    weightBA = 'WeightPC'+str(i)+'BA'\n",
    "    weightAA = 'WeightPC'+str(i)+'AA'\n",
    "\n",
    "    tot = name + 'total'\n",
    "    totBA = nameBA + 'total'\n",
    "    totAA = nameAA + 'total'\n",
    "    # Connectivity between PC-dummy\n",
    "    steps =np.arange(i,nrDummy,nrPC)\n",
    "    #print(steps)\n",
    "    # Multiply the current times the weight\n",
    "    #current = [Input['I'][k]*Input['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    #currentBA = [Input_BA['I'][k]*Input_BA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    weight_BA = [Input_BA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    weight_AA = [Input_AA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    \n",
    "    currentBA = [Input_BA['I'][k]*Input_BA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    currentAA = [Input_AA['I'][k]*Input_AA['nweight'][steps[k]] for k in range(0,len(steps))]\n",
    "    #[Input_s.nweight_BA[steps[k]]*Input_s.I_BA[k] for k in range(0,len(steps))]\n",
    "    #print(steps[1])\n",
    "    #print(size(Input_s.nweight_BA[0]))\n",
    "    #print(size(current))\n",
    "    # Sum over the column to get the total amount of current\n",
    "    #summedcurrent = sum(current,axis=0)\n",
    "    summedcurrentBA = sum(currentBA, axis=0)\n",
    "    summedcurrentAA = sum(currentAA, axis=0)\n",
    "    \n",
    "    #InputCurrentPC[name] = current\n",
    "    InputCurrentPC_BA[nameBA] = currentBA\n",
    "    InputCurrentPC_AA[nameAA] = currentAA\n",
    "    \n",
    "    # weights seperate\n",
    "    InputCurrentPC_BA[weightBA] = weight_BA\n",
    "    InputCurrentPC_AA[weightAA] = weight_AA\n",
    "    \n",
    "    #InputCurrentPC[tot] = summedcurrent\n",
    "    InputCurrentPC_BA[totBA] = summedcurrentBA\n",
    "    InputCurrentPC_AA[totAA] = summedcurrentAA\n",
    "    \n",
    "print(InputCurrentPC_BA['WeightPC0BA'])    \n",
    "#for k in range(0,nrPC):\n",
    "#    figure() \n",
    "#    title('PC'+str(k)+'input current')\n",
    "#    nameBA= 'PC'+str(k)+'BA'\n",
    "#    nameAA= 'PC'+str(k)+'AA'\n",
    "#    for i in range(0,nrInputs):\n",
    "#        subplot(nrInputs,1,i+1)\n",
    "#        plot(InputCurrentPC_BA[nameBA][i])\n",
    "#        plot(InputCurrentPC_AA[nameAA][i])\n",
    "#        #subplot(nrInputs,1,i+1)\n",
    "#    figure()\n",
    "#    for i in range(0,nrInputs):\n",
    "#        subplot(nrInputs,1,i+1)\n",
    "#        plot(Input_BA['nweight'][k+i])\n",
    "#        axvline(SpikeTimes_BA[connectionVector[k]])\n",
    "#        plot(Input_AA['nweight'][k+i])\n",
    "\n",
    "#print(size(InputCurrentPC_BA['PC1BA'],0))\n",
    "plt.figure()\n",
    "plt.plot(InputCurrentPC_BA['WeightPC0BA'])    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(InputCurrentPC_BA['WeightPC0BA'][0])    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(InputCurrentPC_BA['WeightPC0AA'][0])    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(InputCurrentPC_AA['WeightPC0AA'][0])    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook matplotlib\n",
    "plt.figure()\n",
    "plt.plot(InputCurrentPC_AA['WeightPC0AA'][0])    \n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
